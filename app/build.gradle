plugins {
    id 'com.android.application'
    // id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.me.sample"
        minSdk 30
        targetSdk 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        managedDevices {
            devices {
                // run with ../gradlew  nexusOneApi30DebugAndroidTest
                nexusOneApi30(com.android.build.api.dsl.ManagedVirtualDevice) {
                    // A lower resolution device is used here for better emulator performance
                    device = "Nexus One"
                    apiLevel = 31
                    // Also use the AOSP ATD image for better emulator performance
                    systemImageSource = "aosp-atd"
                }
            }
        }
    }   
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    // testing dependency
    testImplementation 'junit:junit:4.13.2'
     androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
//    // Testing-only dependencies
//    androidTestImplementation 'androidx.test:core:' + rootProject.coreVersion;
//    androidTestImplementation 'androidx.test.ext:junit:' + rootProject.extJUnitVersion;
//    androidTestImplementation 'androidx.test:runner:' + rootProject.runnerVersion;
//    androidTestImplementation 'androidx.test.espresso:espresso-core:' + rootProject.espressoVersion;
//    androidTestImplementation 'androidx.test.espresso:espresso-contrib:' + rootProject.espressoVersion;
    
    // Support Design for Coordinator layout
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    // Androidx CardView
    implementation "androidx.cardview:cardview:1.0.0"

    // retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // 自动将服务器返回的数据 以及 我们传给一个JavaBeen实体，转换成json
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    // 日志拦截器：OKHttp日志拦截器，OKHttp官方提供
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    // Rxjava + retrofit 用到的一个依赖库，使接口回调的数据以Rxjava形式供我们接受
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    // rxjava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.12'

    // RxLifeCycle: 防止Rxjava引发的内存泄漏: 为RxJava添加生命周期感知能力
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'
    // // AutoDisposable: 这个原理理解一下；这个第三方库也需要尝试一下
    // implementation 'com.uber.autodispose:autodispose:1.3.0'
    // implementation 'com.uber.autodispose:autodispose-android-archcomponents:1.3.0'

    // // Generated
    // implementation 'org.glassfish:javax.annotation:3.2-b06'

    // 解析json 数据: 实体解析库
    implementation 'com.google.code.gson:gson:2.8.7'
    
    // AndroidX room database
    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // optional - RxJava2 support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    
    // Hilt 和 Hilt注解处理器: 在内存泄露与Hilt自动注入之间，先选择解决问题，试一下RxLifeCycle第三方库解决内存泄露的问题
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    annotationProcessor "com.google.dagger:hilt-android-compiler:2.28-alpha"
    // Hilt 对于ViewModel的支持
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    annotationProcessor 'androidx.hilt:hilt-compiler:1.0.0-alpha02'

    def lifecycle_version = "2.5.1"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"

    // 腾讯MMKV: JetPack中也有一个组件是用来解决SharedPreferences的，就是DataStore
    // 在DataStore出现之前已经有一些第三方的本地缓存处理库了，例如腾讯的MMKV库
    implementation 'com.tencent:mmkv:1.2.11'
    
    // 图片加载框架
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // circle imageview：这个库直接使用是没有问题的；但因为有现做的例子，就自己再实现了一遍
    // implementation 'de.hdodenhof:circleimageview:2.2.0'
}
